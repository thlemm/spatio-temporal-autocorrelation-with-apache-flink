package de.thlemm.constants;

import java.util.concurrent.TimeUnit;

public class Weights {
    public static final int[][] neighboursFirstOrder = {{1},{30,124,132},{32,51,81,184,185,242,254},{79,148,224,232},{84,99,204},{14,115,118,214,221},{146,179,193,207,223,226,260},{179,194,223},{16,73,98,121,171,192},{205,215,216,218,219},{14,22,67},{13,88,195,261},{12,231,261},{6,11,67,227,228},{16,171,208,252},{9,15,64,98,171,175},{37,49,61,80,217,225},{20,94,136,174,241},{64,101,175,191},{18,31,47,78,94,174},{22,26,108,123,178},{11,21,26,67},{99,118,156,187,251},{41,43,151,166},{33,40,52,65,97,106,181},{21,22,67,89,111,133,178,227},{154,201},{93,121,130,131,134,135,197},{55,108,123,150,210},{2},{20,32,78,174,185,240,242,254},{3,31,185,254},{25,45,52,54,65,66},{49,66,97,217,256},{61,72,76,77,177},{37,80,96,198},{17,36,63,80,96,177,225},{139,191,203,205},{72,76,91,155,222},{25,52,54,106,195,228},{24,42,43,74,75,152,166},{41,74,116,119,120,152,166,247},{24,41,75,142,151,163,236,237,238,239},{84,99,204},{33,66,144,148,209,231,232},{184},{20,59,69,78,94,167,169},{50,68,100,142,143,163,230,246},{17,34,61,97,189,217},{48,142,143,246},{3,81,184},{25,33,40,54},{92,138,252},{33,40,52,195},{29,108},{57,82,93,95,173,196},{56,93,173},{184,208},{47,60,78,167},{59,78,126,167,212,213,242,248},{17,35,49,62,72,177,189,225},{61,72,188,189,190},{37,76,96,124,177,180,258},{16,19,101,175},{25,33,66,97},{33,34,45,65,97},{11,14,22,26,227},{48,90,100,158,186,246,249},{47,159,167,168,169,247},{93,129,138,173},{72,85,89,91,188},{35,39,61,62,71,76,91,188},{9,92,171,192},{41,42,75,168,194,247},{41,43,74,236,262,263},{35,39,63,72,77,124,177,222},{35,76,177},{20,31,47,59,60,242},{4,107,113,114,148,224,232,234},{17,36,37,112,157,198,217,255,256},{3,51,184,254,259},{56,83,129,157,160,173,196},{82,129,157,260},{5,44,99,109,118,204},{71,89,188},{117},{88,209,261},{12,87,105,261},{26,71,85,91,133,165,178,188,190,257},{68,113,186,234,249},{39,71,72,89,149,155,165},{53,73,93,171,192,252,253},{28,56,57,70,92,95,134,135,138,173,192,253},{18,20,47,136,169,235},{56,93,96,102,134,196},{36,37,63,95,102,134,197,198,258},{25,34,49,65,66,181,189},{9,16,121,131,175,191,192},{5,23,44,84,109,118,204},{48,68,161,164,186,230},{19,64},{95,96,160,196,198},{103},{104},{88},{25,40,181,195,228},{79,113,137,164,170,224,234},{21,29,55,123},{84,99,110,118,176},{109,176},{26,133,227,228,257},{80,255},{79,90,107,114,234,249},{79,113,125,144,211,249},{6,118,221,245,251},{42,152,244},{86,201,230},{6,23,84,99,109,115,172,176,214,251},{42,235,247},{42,127,235,243,244},{9,28,98,131,135,192},{130,131,191,205},{21,29,108,149,165,178,210},{2,63,76,132,180,216},{114,158,211,231,249},{60,147,167,168,212,213},{120,128,136,153,243},{127,220,243},{70,82,83,138,173,207,223,260},{28,122,131,134,197,205,215,216},{28,98,121,122,130,175,191},{2,124,203,216,219},{26,89,111,257},{28,93,95,96,130,197},{28,93,121,192},{18,94,127,153,220,235,241},{107,170,224,233},{53,70,93,129,223},{38,203,205,218,219},{141,202,229,262,263},{140,162,229,236,237,262,263},{43,48,50,143,163,239},{48,50,142,239},{45,114,148,211,231},{146,193,202,223,226},{7,145,193,226},{126,159,167,168},{4,45,79,144,232},{91,123,154,155,165,210},{29,154,210},{24,43,238},{41,42,116,166},{127,136,220},{27,149,150,155,210},{39,91,149,154},{23,187},{80,82,83,160,198,226,260},{68,125,246,249},{69,147,167,168},{82,102,157,196,198},{100,162,163,164,170,230},{141,161,163,170,229,233,237},{43,48,142,161,162,230,237},{100,107,161,170,186,230,234},{89,91,123,149,178},{24,41,42,152},{47,59,60,69,126,147,159},{69,74,126,147,159,194,247},{47,69,94,235,247},{107,137,161,162,164,233,234},{9,15,16,73,92,252},{118,176,214},{56,57,70,82,93,129},{18,20,31,240,241},{16,19,64,98,131,191},{109,110,118,172},{35,37,61,63,76,77,225},{21,26,89,123,165},{7,8,193,223},{63,124,197,216,258},{25,97,106,189,190,228,257},{212,242,248,250},{184,208,242},{3,46,51,58,81,183,208,242},{3,31,32,242},{68,90,100,164,234},{23,156,206,251},{62,71,72,85,89,190},{49,61,62,97,181,190},{62,89,181,188,189,257},{19,38,98,122,131,175,205},{9,73,92,93,98,121,135},{7,145,146,202,179},{8,74,168},{12,40,54,106,228},{56,82,95,102,160},{28,96,130,134,180,215,216,258},{36,80,96,102,157,160},{223},{220,240},{27,117,230},{140,145,193,229},{38,132,139,219},{5,44,84,99},{10,38,122,130,139,191,215,218},{187,221,245,251},{7,129,223,260},{15,58,183,184,213,242,250,252},{45,87,231,261},{29,123,149,150,154},{114,125,144,231},{60,126,182,213,248,250},{60,126,208,212,250},{6,118,172},{10,130,197,205,216},{10,124,130,132,180,197,215,219},{17,34,49,80,256},{10,139,205,219},{10,132,139,203,216,218},{128,136,153,200,240,241},{6,115,206,245},{39,76},{7,8,129,138,145,179,207},{4,79,107,137},{17,37,61,177},{7,145,146,157,260},{14,26,67,111,228},{14,40,106,111,181,195,227,257},{140,141,162,202,233,237},{48,100,117,161,163,164,201},{13,45,125,144,209,211,261},{4,45,79,148,256},{137,162,170,229},{79,90,107,113,164,170,186,249},{94,119,120,136,169,247},{43,75,141,237,263},{43,141,162,163,229,236},{43,151,239},{43,142,143,238},{31,174,200,220,241,254,259},{18,136,174,220,240},{3,31,60,78,182,183,184,185,208,248,250},{120,127,128,244},{116,120,243},{115,206,221,251},{48,50,68,158},{42,69,74,119,168,169,235},{60,182,212,242},{68,90,113,114,125,158,234},{182,208,212,213,242},{23,115,118,187,206,245},{15,53,92,171,208},{92,93},{3,31,32,81,240,259},{80,112,256},{34,80,217,232,255},{89,111,133,181,190,228},{63,96,180,197},{81,240,254},{7,83,129,157,207,226},{12,13,87,88,209,231},{75,140,141,263},{75,140,141,236,262}};
    // public static final int[][] neighboursFirstOrder = {{1},{30,132},{32,51,81,184,185,242,254},{79,148,224,232},{84,99,204},{115,118,214,221},{146,179,193,207,223,226,260},{179,223},{16,73,98,121,171,192},{205,215,216,218,219},{14,22,67},{13,88,103,105,261},{12,231,261},{11,67,227,228},{16,171,252},{9,15,64,98,171,175},{37,49,61,80,217,225},{20,94,136,174,241},{64,101,175,191},{18,31,47,78,94,174},{22,26,108,123,178},{11,21,26,67},{99,118,156,187,251},{41,43,151,166},{33,40,52,65,97,106,181},{21,22,67,89,111,133,178,227},{201},{93,121,130,131,134,135,197},{55,108,123,150,210},{2},{20,32,78,174,185,240,242,254},{3,31,185,254},{25,52,54,65,66},{49,66,97,217,256},{61,72,76,77,177},{37,80,96,198},{17,36,63,80,96,177,225},{139,191,203,205},{72,76,91,155,222},{25,52,54,106,195,228},{24,42,43,74,75,152,166},{41,74,116,120,152,166},{24,41,75,142,151,163,236,237,238,239},{84,99,204},{144,148,209,231,232},{184},{20,59,69,78,94,167,169},{50,68,100,142,143,163,230,246},{17,34,61,97,189,217},{48,142,143,246},{3,81,184},{25,33,40,54},{92,138,252},{33,40,52,105,195},{29,108},{57,82,93,95,173,196},{56,93,173},{184,208},{47,60,78,167},{59,78,126,167,212,213,242,248},{17,35,49,62,72,177,189,225},{61,72,188,189,190},{37,76,96,124,177,180,258},{16,19,101,175},{25,33,66,97},{33,34,65,97},{11,14,22,26,227},{48,90,100,158,186,246,249},{47,159,167,168,169,247},{93,129,138,173},{72,85,89,91,188},{35,39,61,62,71,76,91,188},{9,92,171,192},{41,42,75,194},{41,43,74,236,262,263},{35,39,63,72,77,124,177,222},{35,76,177},{20,31,47,59,60,242},{4,107,113,114,148,224,232,234},{17,36,37,112,157,198,217,255,256},{3,51,184,254,259},{56,83,129,157,160,173,196},{82,129,157,260},{5,44,99,109,118,204},{71,89,188},{117},{88,105,209,261},{12,87,105,261},{26,71,85,91,133,165,178,188,190,257},{68,113,186,234,249},{39,71,72,89,149,155,165},{53,73,93,171,192,252,253},{28,56,57,70,92,95,134,135,138,173,192,253},{18,20,47,136,169,235},{56,93,96,102,134,196},{36,37,63,95,102,134,197,198,258},{25,34,49,65,66,181,189},{9,16,121,131,175,191,192},{5,23,44,84,109,118,204},{48,68,161,164,186,230},{19,64},{95,96,160,196,198},{12,104},{103},{12,54,87,88,195},{25,40,181,195,228},{79,113,137,164,170,224,234},{21,29,55,123},{84,99,110,118,176},{109,176},{26,133,227,228,257},{80,255},{79,90,107,114,234,249},{79,113,125,144,211,249},{6,118,221,245,251},{42,152,244},{86,201},{6,23,84,99,109,115,172,176,214,251},{235,247},{42,127,243,244},{9,28,98,131,135,192},{130,131,191,205},{21,29,108,149,165,178,210},{63,76,132,180,216},{114,158,211,231,249},{60,147,167,168,212,213},{120,128,243},{127,220,243},{70,82,83,138,173,207,223,260},{28,122,131,134,197,205,215,216},{28,98,121,122,130,175,191},{2,124,203,216,219},{26,89,111,257},{28,93,95,96,130,197},{28,93,121,192},{18,94,153,220,235,241},{107,170,224,233},{53,70,93,129,199,223},{38,203,205,218,219},{141,202,229,262,263},{140,162,229,236,237,262,263},{43,48,50,143,163,239},{48,50,142,239},{45,114,148,211,231},{146,193,202,226},{7,145,193,226},{126,159,167,168},{4,45,79,144,232},{91,123,154,155,165,210},{29,154,210},{24,43,238},{41,42,116,166},{136,220},{149,150,155,210},{39,91,149,154},{23,187},{80,82,83,160,198,226,260},{68,125,246,249},{69,147,167,168},{82,102,157,196,198},{100,162,163,164,170,230},{141,161,163,170,229,233,237},{43,48,142,161,162,230,237},{100,107,161,170,186,230,234},{89,91,123,149,178},{24,41,42,152},{47,59,60,69,126,147,159},{69,126,147,159,247},{47,69,94,235,247},{107,137,161,162,164,233,234},{9,15,16,73,92,252},{118,176,214},{56,57,70,82,93,129},{18,20,31,240,241},{16,19,64,98,131,191},{109,110,118,172},{35,37,61,63,76,77,225},{21,26,89,123,165},{7,8,193,202,223},{63,124,197,216,258},{25,97,106,189,190,228,257},{212,242,248,250},{184,208,242},{3,46,51,58,81,183,208,242},{3,31,32,242},{68,90,100,164,234},{23,156,206,251},{62,71,72,85,89,190},{49,61,62,97,181,190},{62,89,181,188,189,257},{19,38,98,122,131,175,205},{9,73,92,93,98,121,135},{7,145,146,202,179},{74},{40,54,105,106,228},{56,82,95,102,160},{28,96,130,134,180,215,216,258},{36,80,96,102,157,160},{138},{220,240},{27,117},{140,145,179,193,229},{38,132,139,219},{5,44,84,99},{10,38,122,130,139,191,215,218},{187,221,245,251},{7,129,223,260},{58,183,184,213,242,250},{45,87,231,261},{29,123,149,150,154},{114,125,144,231},{60,126,182,213,248,250},{60,126,208,212,250},{6,118,172},{10,130,197,205,216},{10,124,130,132,180,197,215,219},{17,34,49,80,256},{10,139,205,219},{10,132,139,203,216,218},{128,136,153,200,240,241},{6,115,206,245},{39,76},{7,8,129,138,179,207},{4,79,107,137},{17,37,61,177},{7,145,146,157,260},{14,26,67,111,228},{14,40,106,111,181,195,227,257},{140,141,162,202,233,237},{48,100,161,163,164},{13,45,125,144,209,211,261},{4,45,79,148},{137,162,170,229},{79,90,107,113,164,170,186,249},{94,119,136,169,247},{43,75,141,237,263},{43,141,162,163,229,236},{43,151,239},{43,142,143,238},{31,174,200,220,241,254,259},{18,136,174,220,240},{3,31,60,78,182,183,184,185,208,248,250},{120,127,128,244},{116,120,243},{115,206,221,251},{48,50,68,158},{69,119,168,169,235},{60,182,212,242},{68,90,113,114,125,158,234},{182,208,212,213,242},{23,115,118,187,206,245},{15,53,92,171},{92,93},{3,31,32,81,240,259},{80,112,256},{34,80,217,255},{89,111,133,181,190,228},{63,96,180,197},{81,240,254},{7,83,129,157,207,226},{12,13,87,88,209,231},{75,140,141,263},{75,140,141,236,262}};
    // public static final int[][] neighboursFirstOrder = {{0},{3,5},{2,4,5,6,7,8,9},{3,5,8,9},{2,3,4,7},{3,7,8,9},{3,5,6,8,9},{3,4,6,7,9,10},{3,4,6,7,8},{8}};

    public static double[][] createBinaryWeightsMatrix(int[][] rawList){
        int length = rawList.length;
        double[][] matrix = new double[length][length];

        for (int i = 0; i < rawList.length; i++) {
            for (int j = 0; j < rawList[i].length; j++) {
                if (rawList[i][j] != 0) {
                    int position = rawList[i][j]-1;
                    matrix[i][position] = 1;
                }
            }
        }
        return matrix;
    }

    public static double[][] createBinaryWeightsMatrixRowStandardized(int[][] rawList){
        int length = rawList.length;
        double[][] matrix = new double[length][length];

        for (int i = 0; i < length; i++) {
            int rowLength = rawList[i].length;
            for (int j = 0; j < rowLength; j++) {
                if (rawList[i][j] > 0.0) {
                    int position = rawList[i][j]-1;
                    matrix[i][position] = 1.0/rowLength;
                }
            }
        }
        return matrix;
    }

    public static int getW(int[][] rawList) {
        double w = 0;
        for (int[] ints : rawList) {
            int rowLength = ints.length;
            for (int anInt : ints) {
                if (anInt != 0) {
                    w += 1.0 / rowLength;
                }
            }
        }
        // return (int) round(w, 0);
        return (int) Math.ceil(w);
    }

    public static int getN(int[][] rawList) {
        return rawList.length;
    }

}
